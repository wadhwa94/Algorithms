//making a BST from an given array
//inorder
//converting BST to sorted linked list 
//converting back List to BST
#include <iostream>
using namespace std;
int n;
struct node {
	int val;
	node *left;
	node *right;
};
node * BST(int a[]){
	node * root =new node;
	root->val=a[0];
	root->left=NULL;
	root->right=NULL;
	for(int i=1;i<n;i++){
		int flag=0;
		node *t = root;
		while(flag!=1){
			if(a[i] > t->val){
					if(t->right!=NULL){
		                 t=t->right;
					}
				    else{
					     node *k = new node;
						 k->val = a[i];
				 		k->left=NULL;
						k->right=NULL;
						t->right=k;
						flag=1;
					}
			}
			else{
				 	if(t->left!=NULL){
		                 t=t->left;
					}
				    else{
					     node *k = new node;
						 k->val = a[i];
				 		k->left=NULL;
						k->right=NULL;
						t->left=k;
						flag=1;
					}
			}
		}
	}
	return root;
}
void inorder(node *root){
	if(root==NULL)return;
	inorder(root->left);
	cout<<root->val<<" ";
	inorder(root->right);
}
node *bstToListUtil(node *root){
	if(root==NULL)
	return NULL;
	
	if(root->left!=NULL)
	{
	  node *left = bstToListUtil(root->left);
	  for(;left->right!=NULL;left=left->right);
	    
      left->right	=root;
	    
	  root->left=left;
	}
	if(root->right!=NULL){
		node *right = bstToListUtil(root->right);
	  for(;right->left!=NULL;right=right->left);
	    
      right->left = root;
	    
	  root->right=right;
	}
	return root;
}
node * bstToList(node *root){
	if(root==NULL)
	return NULL;
	
	root = bstToListUtil(root);
	
	while(root->left!=NULL)
	root=root->left;
	
	return root; 
}

void printList(node *head){
	cout<<endl<<"List Linked"<<endl;
	while(head!=NULL){
		cout<<head->val<<" ";
		head=head->right;
	}
}
node *linkListToBST(node **head,int n){
	if(n<=0)
	return NULL;
	
	node *left = linkListToBST(head,n/2);
	node *root = *head;
	root->left = left;
	
	*head = (*head)->right;
	root->right = linkListToBST(head,(n-(n/2)-1));
	return root;
	  
	
}
int main(){
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)cin>>a[i];
	node *root = BST(a);
	cout<<"inorder first time"<<endl;
	inorder(root);
	node * head = bstToList(root);
	printList(head);
	node *new_root = linkListToBST(&head,n);
	cout<<"inorder second time"<<endl;
	inorder(new_root);
}
// 7 3 9 2 6 8 1 3 5 11
